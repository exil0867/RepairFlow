generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  phoneNumber  String
  taxId        String
  applications Application[]
  devices      Device[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Application {
  id         Int                   @id @default(autoincrement())
  status     Status
  subject    String
  notes      String?
  deviceId   Int
  customerId Int
  customer   Customer              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  device     Device                @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  conclusion ConcludedApplication?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model ConcludedApplication {
  id            Int         @id @default(autoincrement())
  changes       String
  cost          Decimal
  applicationId Int         @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Device {
  id           Int           @id @default(autoincrement())
  serialNumber String
  model        String
  brand        String
  customerId   Int
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum Status {
  REPAIRED
  REPAIRING
  CANCELLED
}
